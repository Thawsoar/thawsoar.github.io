{"meta":{"title":"A Person's Blog","subtitle":"前端菜鸟の航线","description":"If they can do it, so can you .Be What You Want Be！","author":"Thawsoar","url":"https://thawsoar.github.io"},"pages":[{"title":"","date":"2017-09-01T06:58:52.964Z","updated":"2017-09-01T06:58:52.964Z","comments":true,"path":"404.html","permalink":"https://thawsoar.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2017-06-06T08:19:05.000Z","updated":"2017-06-07T13:18:00.725Z","comments":true,"path":"categories/index.html","permalink":"https://thawsoar.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-07-27T07:43:45.000Z","updated":"2018-07-27T07:48:14.101Z","comments":true,"path":"about/index.html","permalink":"https://thawsoar.github.io/about/index.html","excerpt":"","text":"About me 懒惰的菜鸟 About the site 捡拾前辈们的羽翼，记录生活中的点滴 ！ 分享一切！ Contact way Name: axiang Phone: 15852751385 Q Q： 1306750238 Email：thawsoar@foxmail.com My belief Code wins arguments Done is better than perfect Say focused &amp; Keep shipping Move fast &amp; Break things My history: 2017.7.12 入职无锡亚信 了解公司文化 熟悉项目代码 划水学习 买水搬水拆桌子 抬交通信号机 统计发票 敲点前端代码,赶个项目 依葫芦画瓢仿写java接口 物博会划水 公司贴文化墙 2018.3.1 入职无锡中育优教科技有限公司 待续"},{"title":"首页","date":"2017-06-06T08:44:45.000Z","updated":"2017-06-09T09:20:39.938Z","comments":true,"path":"index/index.html","permalink":"https://thawsoar.github.io/index/index.html","excerpt":"","text":""},{"title":"照片墙","date":"2017-06-19T02:16:28.000Z","updated":"2018-07-27T08:32:18.163Z","comments":true,"path":"photo/index.html","permalink":"https://thawsoar.github.io/photo/index.html","excerpt":"","text":"没了 ~_~"},{"title":"标签","date":"2017-06-06T08:15:04.000Z","updated":"2017-06-06T08:20:48.901Z","comments":true,"path":"tags/index.html","permalink":"https://thawsoar.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Facebook 經典語錄","slug":"life_facebook_quote","date":"2018-07-27T08:10:58.000Z","updated":"2018-07-27T08:57:26.408Z","comments":true,"path":"2018/07/27/life_facebook_quote/","link":"","permalink":"https://thawsoar.github.io/2018/07/27/life_facebook_quote/","excerpt":"Done is better than perfect Code wins arguments","text":"Done is better than perfect Code wins arguments Say focused &amp; Keep shipping Move fast &amp; Break things","categories":[{"name":"life","slug":"life","permalink":"https://thawsoar.github.io/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://thawsoar.github.io/tags/life/"}]},{"title":"python 装饰器简要笔记","slug":"python_decorator","date":"2018-07-27T03:58:58.000Z","updated":"2018-07-27T07:34:10.500Z","comments":true,"path":"2018/07/27/python_decorator/","link":"","permalink":"https://thawsoar.github.io/2018/07/27/python_decorator/","excerpt":"python函数式编程装饰器简要笔记 廖雪峰的官方网站 案例设计一个decorator，可作用于任何函数上，在函数调用前后自动打印日志：123456789101112131415161718import functoolsdef log(func): @functools.wraps(func) def wrapper(*args, **kw): print('call %s():' % func.__name__) return func(*args, **kw) return wrapper@log #把@log放到now()函数的定义处，相当于执行了语句： now = log(now)def now(): print('2018-7-27')now()# resultcall now():2018-7-27 log是一个decorator，接受一个函数作为参数，并返回一个函数 函数对象有一个name属性，可以拿到函数的名字 函数也是对象，它有name等属性，但你去看经过decorator装饰之后的函数，它们的name已经从原来的’now’变成了’wrapper’,因此有些依赖函数签名的代码执行就会出错，可以使用Python内置的functools.wraps解决 wrapper()函数的参数定义是(args, *kw),因此，wrapper()函数可以接受任意参数的调用。 Python的@语法，把decorator置于函数的定义处","text":"python函数式编程装饰器简要笔记 廖雪峰的官方网站 案例设计一个decorator，可作用于任何函数上，在函数调用前后自动打印日志：123456789101112131415161718import functoolsdef log(func): @functools.wraps(func) def wrapper(*args, **kw): print('call %s():' % func.__name__) return func(*args, **kw) return wrapper@log #把@log放到now()函数的定义处，相当于执行了语句： now = log(now)def now(): print('2018-7-27')now()# resultcall now():2018-7-27 log是一个decorator，接受一个函数作为参数，并返回一个函数 函数对象有一个name属性，可以拿到函数的名字 函数也是对象，它有name等属性，但你去看经过decorator装饰之后的函数，它们的name已经从原来的’now’变成了’wrapper’,因此有些依赖函数签名的代码执行就会出错，可以使用Python内置的functools.wraps解决 wrapper()函数的参数定义是(args, *kw),因此，wrapper()函数可以接受任意参数的调用。 Python的@语法，把decorator置于函数的定义处 练习请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间： 123456789101112131415161718192021222324252627import time, functoolsdef metric(fn): @functools.wraps(fn) def wrapper(*args,**kw): startTime = time.time() fn(*args,**kw) endTime = time.time() execTime = (endTime - startTime) *1000 print('%s executed in %s ms' % (fn.__name__, execTime)) return fn(*args,**kw) return wrapper# 测试@metricdef fast(x, y): time.sleep(1) return x + y;@metricdef slow(x, y, z): time.sleep(1.5) return x * y * z;f = fast(11, 22)s = slow(11, 22, 33)if f == 33 and s == 7986: print('test success!') 小结 在面向对象（OOP）的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。 decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便","categories":[{"name":"python","slug":"python","permalink":"https://thawsoar.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://thawsoar.github.io/tags/python/"}]},{"title":"python 闭包简要笔记","slug":"python_closure","date":"2018-07-25T14:48:58.000Z","updated":"2018-07-25T15:14:44.506Z","comments":true,"path":"2018/07/25/python_closure/","link":"","permalink":"https://thawsoar.github.io/2018/07/25/python_closure/","excerpt":"python闭包简要笔记 廖雪峰的官方网站 案例 一个函数可以返回一个计算结果，也可以返回一个函数。返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。 如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变. 12345678910111213def count(): def f(j): def g(): return j*j return g fs = [] for i in range(1, 4): fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f() return fsf1, f2, f3 = count()f1() #&gt;&gt;&gt; 1f2() #&gt;&gt;&gt; 4f3() #&gt;&gt;&gt; 9","text":"python闭包简要笔记 廖雪峰的官方网站 案例 一个函数可以返回一个计算结果，也可以返回一个函数。返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。 如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变. 12345678910111213def count(): def f(j): def g(): return j*j return g fs = [] for i in range(1, 4): fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f() return fsf1, f2, f3 = count()f1() #&gt;&gt;&gt; 1f2() #&gt;&gt;&gt; 4f3() #&gt;&gt;&gt; 9 练习利用闭包返回一个计数器函数，每次调用它返回递增整数 方法一 123456def createCounter(): a = [0] def counter(): a[0] += 1 return a[0] return counter 在python2中，没有nonlocal这个关键字，我们可以把闭包变量改成可变类型数据进行修改，比如列表。 方法二 1234567def createCounter(): s = 0 def counter(): nonlocal s s = s + 1 return s return counter 在python3中，可以用nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。","categories":[{"name":"python","slug":"python","permalink":"https://thawsoar.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://thawsoar.github.io/tags/python/"}]},{"title":"Less 即学即用简要学习笔记","slug":"less_notes","date":"2017-12-03T14:05:58.000Z","updated":"2017-12-03T14:08:30.603Z","comments":true,"path":"2017/12/03/less_notes/","link":"","permalink":"https://thawsoar.github.io/2017/12/03/less_notes/","excerpt":"Less 即学即用简要学习笔记Less less 中文网 less github 编译 node npm install less -g lessc style.less &gt; style.css sublime package install Less package install Less2Css","text":"Less 即学即用简要学习笔记Less less 中文网 less github 编译 node npm install less -g lessc style.less &gt; style.css sublime package install Less package install Less2Css 注释 /*被编译*/ // 不被编译 声明变量 @声明变量1@test_width: 300px; 混合 混合Mixin 1234.div &#123; .box; width: @test_width; &#125; 可带参数 123456.border(@border_width) &#123; border: solid yellow @border_width;&#125; .test_hunhe &#123; .border(30px);&#125; 混合默认带值 123border(border_width:10px) &#123; border: solid green @border_width; &#125; 匹配模式12345678910111213.triangle(bottom,@w:5px,@c:#ccc) &#123; border-width: @w; border-color: @c; border-style: solid dashed dashed dashed;&#125;.triangle(@_,@w:5px,@c:#ccc) &#123; width: 0; height: 0; overflow: hidden;&#125;.sanjiao &#123; .triangle(bottom)&#125; 运算1234@test_width: 300px;.box &#123; width: @test_width +20;&#125; 嵌套规则123456789101112131415.list &#123; ... li &#123; ... &#125; a &#123; ... &amp;:hover &#123; color: red; &#125; &#125; span &#123; ... &#125;&#125; &amp; 代表它的上一层选择器 @arguments 变量123456.border_arg(@w:30px,@c:red,@xx:solid) &#123; border: @arguments;&#125;.test_arguments &#123; .border_arg(40px);&#125; 编译后： .test_arguments { border: 40px solid red; } 避免编译 使用 ~123.test &#123; width: ~calc(300px - 30px);&#125; 编译后：.test { width: calc(300px -30px)} !important关键字123.test_important &#123; .border_radius() !important&#125; 导入123@import \"a\"@import (less) \"a.css\"@import \"b.less\"","categories":[{"name":"less","slug":"less","permalink":"https://thawsoar.github.io/categories/less/"}],"tags":[{"name":"css","slug":"css","permalink":"https://thawsoar.github.io/tags/css/"},{"name":"less","slug":"less","permalink":"https://thawsoar.github.io/tags/less/"}]},{"title":"珍岛响应式官网开发","slug":"trueland","date":"2017-10-22T13:45:58.000Z","updated":"2017-10-22T15:24:55.346Z","comments":true,"path":"2017/10/22/trueland/","link":"","permalink":"https://thawsoar.github.io/2017/10/22/trueland/","excerpt":"珍岛响应式官网开发项目 项目预览: https://thawsoar.github.io/trueland/index.html 源码地址: https://github.com/Thawsoar/trueland 1. 搭建页面骨架及项目目录结构123456789├─ /trueland/ ··················· 项目所在目录└─┬─ /css/ ······················· CSS文件 ├─ /font/ ······················ 使用到的字体文件 ├─ /images/ ······················· 使用到的图片文件 ├─ /js/ ························ JS脚本 ├─ /about.html/ ······················· 关于页面 ├─ /product.html/ ······················· 产品页面 ├─ /favicon.ico ················ 站点图标 └─ /index.html ················· 入口文件 1.1.约定编码规范","text":"珍岛响应式官网开发项目 项目预览: https://thawsoar.github.io/trueland/index.html 源码地址: https://github.com/Thawsoar/trueland 1. 搭建页面骨架及项目目录结构123456789├─ /trueland/ ··················· 项目所在目录└─┬─ /css/ ······················· CSS文件 ├─ /font/ ······················ 使用到的字体文件 ├─ /images/ ······················· 使用到的图片文件 ├─ /js/ ························ JS脚本 ├─ /about.html/ ······················· 关于页面 ├─ /product.html/ ······················· 产品页面 ├─ /favicon.ico ················ 站点图标 └─ /index.html ················· 入口文件 1.1.约定编码规范 1.1.1.HTML约定 在head中引入必要的CSS文件，优先引用第三方的CSS，方便我们自己的样式覆盖 在body末尾引入必要的JS文件，优先引用第三方的JS，注意JS文件之间的依赖关系 第三方资源可用外链 例如 jquery 可用bootcdn外链 1.1.2.CSS约定 除了公共级别样式，其余样式全部由 模块前缀 尽量使用 直接子代选择器， 少用间接子代 避免错杀 1.2.HTML5文档结构12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 1.3.Viewport设置1&lt;meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"&gt; html中插入视口设置，可以通过emmet meta:vp 插入 1.4.浏览器兼容模式1&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; html中插入兼容模式设置，可以通过emmet meta:compat 插入 1.5.favicon（站点图标）1&lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; html中插入图标链接，可以通过emmet link:favicon 插入 1.6.引入相应的第三方文件123456789&lt;link rel=\"stylesheet\" href=\"css/reset.css\"&gt; ............样式重置&lt;link rel=\"stylesheet\" href=\"font/style.css\"&gt; ............引入iconMoon 字体图标&lt;link rel=\"stylesheet\" href=\"css/index.css\"&gt; ............引入也基本样式&lt;link rel=\"stylesheet\" href=\"css/unslider.css\"&gt; ............轮播图插件样式&lt;link rel=\"stylesheet\" href=\"css/media.css\"&gt; ............自定义媒体查询样式...&lt;script src=\"js/index.js\"&gt;&lt;/script&gt; ............js脚本&lt;script src=\"https://cdn.bootcss.com/jquery/2.1.4/jquery.min.js\"&gt;&lt;/script&gt; ............bootcdn外链jquery&lt;script src=\"js/unslider-min.js\"&gt;&lt;/script&gt; ............bootcdn外链jquery 1.7.在我们默认的样式表中将默认字体设置为：12345678body&#123; font-family: \"Helvetica Neue\", Helvetica, Microsoft Yahei, Hiragino Sans GB, WenQuanYi Micro Hei, sans-serif;&#125; 2.完成页面空结构 先划分好页面中的大容器，然后在具体看每一个容器中单独的情况 1234567891011121314151617181920212223242526272829&lt;body&gt; &lt;!-- 头部区域 --&gt; &lt;div class=\"header-wrapper\"&gt;&lt;/div&gt; &lt;!-- /头部区域 --&gt; &lt;!-- 导航 --&gt; &lt;div class=\"nav-wrapper\"&gt;&lt;/div&gt; &lt;!-- /导航 --&gt; &lt;!-- 广告轮播 --&gt; &lt;div class=\"carousel\"&gt;&lt;/div&gt; &lt;!-- /广告轮播 --&gt; &lt;!-- tips --&gt; &lt;div class=\"tips\"&gt;&lt;/div&gt; &lt;!-- /tips --&gt; &lt;!-- 服务列表 --&gt; &lt;div class=\"services-wrapper&gt;&lt;/div&gt; &lt;!-- /服务列表 --&gt; &lt;!-- 产品推荐 --&gt; &lt;div class=\"product-wrapper&gt;&lt;/div&gt; &lt;!-- /产品推荐 --&gt; &lt;!-- 关于我们 --&gt; &lt;div class=\"about-wrapper&gt;&lt;/div&gt; &lt;!-- /关于我们 --&gt; &lt;!-- 关于我们 --&gt; &lt;div class=\"news-wrapper&gt;&lt;/div&gt; &lt;!-- /关于我们 --&gt; &lt;!-- 脚注区域 --&gt; &lt;footer&gt;&lt;/footer&gt; &lt;!-- /脚注区域 --&gt;&lt;/body&gt; 3.构建顶部通栏123&lt;header&gt; &lt;div class=\"topbar\"&gt;&lt;/div&gt;&lt;/header&gt; 3.1.container类 用于定义一个固定宽度且居中的版心 12345678&lt;div class=\"topbar\"&gt; &lt;div class=\"container\"&gt; &lt;!-- 此处的代码会显示在一个固定宽度且居中的容器中 该容器的宽度会跟随屏幕的变化而变化 --&gt; &lt;/div&gt;&lt;/div&gt; 3.2.使用flex布局 display: flex; 方便响应式布局 3.2.字体图标12345678910111213141516@font-face &#123; font-family: 'itcast'; src: url('../font/MiFie-Web-Font.eot') format('embedded-opentype'), url('../font/MiFie-Web-Font.svg') format('svg'), url('../font/MiFie-Web-Font.ttf') format('truetype'), url('../font/MiFie-Web-Font.woff') format('woff');&#125;[class^=\"icon-\"],[class*=\" icon-\"] &#123; /*注意上面选择器中间的空格*/ /*我们使用的名为itcast的字体就是上面的@font-face的方式声明的*/ font-family: itcast; font-style: normal;&#125;.icon-mobilephone::before&#123; content: '\\e908';&#125; 字体文件格式 eot : embedded-opentype svg : svg ttf : truetype woff : woff 4.轮播图4.1.unslider JS插件使用 参照unsliderJS插件官网demo相应的样式调整 4.小图片不需要使用背景的方式 小图如果还是使用背景的方式，当屏幕特别小时，效果很差 所以当使用小图时，改用img的方式 123456// 因为我们需要小图时 尺寸等比例变化，所以小图时我们使用img方式if (isSmallScreen) &#123; $item.html('&lt;img src=\"' + imgSrc + '\" alt=\"\" /&gt;');&#125; else &#123; $item.empty();&#125; 待续……","categories":[{"name":"项目实战","slug":"项目实战","permalink":"https://thawsoar.github.io/categories/项目实战/"}],"tags":[{"name":"项目","slug":"项目","permalink":"https://thawsoar.github.io/tags/项目/"},{"name":"响应式","slug":"响应式","permalink":"https://thawsoar.github.io/tags/响应式/"}]},{"title":"仿微金所-Bootstrap搭建","slug":"bootstrap_web","date":"2017-06-20T13:45:58.000Z","updated":"2017-06-21T12:46:42.972Z","comments":true,"path":"2017/06/20/bootstrap_web/","link":"","permalink":"https://thawsoar.github.io/2017/06/20/bootstrap_web/","excerpt":"微金所项目实战 项目预览: https://thawsoar.github.io/bootstrap_web/ 源码地址: https://github.com/Thawsoar/bootstrap_web 1. 搭建Bootstrap页面骨架及项目目录结构12345678├─ /weijinsuo/ ··················· 项目所在目录└─┬─ /css/ ······················· 我们自己的CSS文件 ├─ /font/ ······················ 使用到的字体文件 ├─ /img/ ······················· 使用到的图片文件 ├─ /js/ ························ 自己写的JS脚步 ├─ /lib/ ······················· 从第三方下载回来的库【只用不改】 ├─ /favicon.ico ················ 站点图标 └─ /index.html ················· 入口文件 1.1.约定编码规范","text":"微金所项目实战 项目预览: https://thawsoar.github.io/bootstrap_web/ 源码地址: https://github.com/Thawsoar/bootstrap_web 1. 搭建Bootstrap页面骨架及项目目录结构12345678├─ /weijinsuo/ ··················· 项目所在目录└─┬─ /css/ ······················· 我们自己的CSS文件 ├─ /font/ ······················ 使用到的字体文件 ├─ /img/ ······················· 使用到的图片文件 ├─ /js/ ························ 自己写的JS脚步 ├─ /lib/ ······················· 从第三方下载回来的库【只用不改】 ├─ /favicon.ico ················ 站点图标 └─ /index.html ················· 入口文件 1.1.约定编码规范 1.1.1.HTML约定 在head中引入必要的CSS文件，优先引用第三方的CSS，方便我们自己的样式覆盖 在body末尾引入必要的JS文件，优先引用第三方的JS，注意JS文件之间的依赖关系，比如bootstrap.js依赖jQuery，那就应该先引用jquery.js 然后引用bootstrap.js 1.1.2.CSS约定 除了公共级别样式，其余样式全部由 模块前缀 尽量使用 直接子代选择器， 少用间接子代 避免错杀 1.2.HTML5文档结构12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 1.3.Viewport设置1&lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0\"&gt; html中插入视口设置，可以通过emmet meta:vp 插入 1.4.浏览器兼容模式1&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; html中插入兼容模式设置，可以通过emmet meta:compat 插入 1.5.favicon（站点图标）1&lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt; html中插入图标链接，可以通过emmet link:favicon 插入 1.6.引入相应的第三方文件123456&lt;link rel=\"stylesheet\" href=\"bootstrap.css\"&gt;&lt;link rel=\"stylesheet\" href=\"my.css\"&gt;...&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;&lt;script src=\"bootstrap.js\"&gt;&lt;/script&gt;&lt;script src=\"my.js\"&gt;&lt;/script&gt; 1.7.在我们默认的样式表中将默认字体设置为：12345678body&#123; font-family: \"Helvetica Neue\", Helvetica, Microsoft Yahei, Hiragino Sans GB, WenQuanYi Micro Hei, sans-serif;&#125; 2.完成页面空结构 先划分好页面中的大容器，然后在具体看每一个容器中单独的情况 1234567891011121314151617181920212223242526&lt;body&gt; &lt;!-- 头部区域 --&gt; &lt;header&gt;&lt;/header&gt; &lt;!-- /头部区域 --&gt; &lt;!-- 广告轮播 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /广告轮播 --&gt; &lt;!-- 特色介绍 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /特色介绍 --&gt; &lt;!-- 立即预约 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /立即预约 --&gt; &lt;!-- 产品推荐 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /产品推荐 --&gt; &lt;!-- 新闻列表 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /新闻列表 --&gt; &lt;!-- 合作伙伴 --&gt; &lt;section&gt;&lt;/section&gt; &lt;!-- /合作伙伴 --&gt; &lt;!-- 脚注区域 --&gt; &lt;footer&gt;&lt;/footer&gt; &lt;!-- /脚注区域 --&gt;&lt;/body&gt; 3.构建顶部通栏123&lt;header&gt; &lt;div class=\"topbar\"&gt;&lt;/div&gt;&lt;/header&gt; 3.1.container类 用于定义一个固定宽度且居中的版心 12345678&lt;div class=\"topbar\"&gt; &lt;div class=\"container\"&gt; &lt;!-- 此处的代码会显示在一个固定宽度且居中的容器中 该容器的宽度会跟随屏幕的变化而变化 --&gt; &lt;/div&gt;&lt;/div&gt; 3.2.栅格系统 Bootstrap中定义了一套响应式的网格系统， 其使用方式就是将一个容器划分成12列， 然后通过col-xx-xx的类名控制每一列的占比 3.2.1.row类 因为每一个列默认有一个15px的左右外边距 row类的一个作用就是通过左右-15px屏蔽掉这个边距 123&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt;&lt;/div&gt;&lt;/div&gt; 3.2.2.col-\\-*类 col-xs-[列数]：在超小屏幕下展示几份 col-sm-[列数]：在小屏幕下展示几份 col-md-[列数]：在中等屏幕下展示几份 col-lg-[列数]：在大屏幕下展示几份 xs : 超小屏幕 手机 (&lt;768px) sm : 小屏幕 平板 (≥768px) md : 中等屏幕 桌面显示器 (≥992px) lg : 大屏幕 大桌面显示器 (≥1200px) 123456&lt;div class=\"row\"&gt; &lt;div class=\"col-md-2 text-center\"&gt;&lt;/div&gt; &lt;div class=\"col-md-5 text-center\"&gt;&lt;/div&gt; &lt;div class=\"col-md-2 text-center\"&gt;&lt;/div&gt; &lt;div class=\"col-md-3 text-center\"&gt;&lt;/div&gt;&lt;/div&gt; 此处顶部通栏已经被划分成四列text-center的作用就是让内部内容居中显示 3.2.字体图标12345678910111213141516@font-face &#123; font-family: 'itcast'; src: url('../font/MiFie-Web-Font.eot') format('embedded-opentype'), url('../font/MiFie-Web-Font.svg') format('svg'), url('../font/MiFie-Web-Font.ttf') format('truetype'), url('../font/MiFie-Web-Font.woff') format('woff');&#125;[class^=\"icon-\"],[class*=\" icon-\"] &#123; /*注意上面选择器中间的空格*/ /*我们使用的名为itcast的字体就是上面的@font-face的方式声明的*/ font-family: itcast; font-style: normal;&#125;.icon-mobilephone::before&#123; content: '\\e908';&#125; 123456789&lt;div class=\"col-md-2 text-center\"&gt; &lt;a class=\"mobile-link\" href=\"#\"&gt; &lt;i class=\"icon-mobile\"&gt;&lt;/i&gt; &lt;span&gt;手机微金所&lt;/span&gt; &lt;!-- 这里使用的是bootstrap中的字体图标 --&gt; &lt;i class=\"glyphicon glyphicon-chevron-down\"&gt;&lt;/i&gt; &lt;img src=\"...\" alt=\"\"&gt; &lt;/a&gt;&lt;/div&gt; 字体文件格式 eot : embedded-opentype svg : svg ttf : truetype woff : woff 3.4.hover图片展示123.mobile-link:hover &gt; img &#123; display: block;&#125; 3.5.按钮样式生成 http://blog.koalite.com/bbg/ 可以通过界面生成一个新的按钮样式 123456789101112131415161718192021222324252627282930313233343536373839404142434445.btn-itcast &#123; color: #ffffff; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast:hover,.btn-itcast:focus,.btn-itcast:active,.btn-itcast.active,.open .dropdown-toggle.btn-itcast &#123; color: #ffffff; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast:active,.btn-itcast.active,.open .dropdown-toggle.btn-itcast &#123; background-image: none;&#125;.btn-itcast.disabled,.btn-itcast[disabled],fieldset[disabled] .btn-itcast,.btn-itcast.disabled:hover,.btn-itcast[disabled]:hover,fieldset[disabled] .btn-itcast:hover,.btn-itcast.disabled:focus,.btn-itcast[disabled]:focus,fieldset[disabled] .btn-itcast:focus,.btn-itcast.disabled:active,.btn-itcast[disabled]:active,fieldset[disabled] .btn-itcast:active,.btn-itcast.disabled.active,.btn-itcast[disabled].active,fieldset[disabled] .btn-itcast.active &#123; background-color: #E92322; border-color: #DB3B43;&#125;.btn-itcast .badge &#123; color: #E92322; background-color: #ffffff;&#125; 3.5小屏幕隐藏1&lt;div class=\"topbar hidden-xs hidden-sm\"&gt;&lt;/div&gt; 或者 1&lt;div class=\"topbar visible-md visible-lg\"&gt;&lt;/div&gt; hidden-xx : 在某种屏幕下隐藏 visible-xx : 在某种屏幕尺寸下显示 4.导航通栏 在使用了boostrap过后，大多数界面元素都是通过bootstrap提供好的界面组件修改得来 1234567891011121314151617181920212223242526272829&lt;nav class=\"navbar navbar-itcast navbar-static-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button id=\"btn\" type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#nav_list\" aria-expanded=\"false\"&gt; &lt;span class=\"sr-only\"&gt;切换菜单&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt; &lt;i class=\"icon-icon\"&gt;&lt;/i&gt; &lt;i class=\"icon-logo\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;/div&gt; &lt;div id=\"nav_list\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;我要投资&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;我要借款&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;平台介绍&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;新手专区&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;最新动态&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;微论坛&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right hidden-sm\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;个人中心&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/nav&gt; 4.1.Bootstrap扩展 通过bootstrap文档对导航条样式的设置发现，其实本身是有一个类似于主题的概念 navbar-default：默认的外观 navbar-inverse：暗色背景的样式 所以我们希望可以通过自定义一套完整的风格： navbar-itcast 1234.navbar-itcast&#123; ...&#125;...具体代码参考navbar-default实现即可 4.2.品牌logo 任然使用字体图标 4.3.菜单行高调整 默认样式中菜单的行高为20px，我们可以调整为自己想要的高度 一般都是通过自己的样式去覆盖 5.轮播图5.1.Bootstrap JS插件使用 对于Bootstrap的JS插件，我们只需要将文档实例中的代码粘到我们自己的代码中让后作出相应的样式调整 5.1.1.Bootstrap中轮播图插件叫作Carousel5.1.2.基本的轮播图实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- 以下容器就是整个轮播图组件的整体， 注意该盒子必须加上 class=\"carousel slide\" data-ride=\"carousel\" 表示当前是一个轮播图 bootstrap.js会自动为当前元素添加图片轮播的特效--&gt;&lt;div id=\"轮播图的ID\" class=\"carousel slide\" data-ride=\"carousel\"&gt; &lt;!-- ol标签是图片轮播的控制点 --&gt; &lt;ol class=\"carousel-indicators\"&gt; &lt;!-- 每一个li就是一个单独的控制点 data-target属性就是指定当前控制点控制的是哪一个轮播图，其目的是如果界面上有多个轮播图，便于区分到底控制哪一个 data-slide-to属性是指当前的li元素绑定的是第几个轮播项 注意，默认必须给其中某个li加上active，展示的时候就是焦点项目 --&gt; &lt;li data-target=\"#轮播图的ID\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt; &lt;li data-target=\"#轮播图的ID\" data-slide-to=\"1\"&gt;&lt;/li&gt; &lt;!-- ...更多的 --&gt; &lt;/ol&gt; &lt;!-- .carousel-inner是所有轮播项的容器盒子， 注意role=\"listbox\"代表当前div是一个列表盒子，作用就是给当前div添加一个语义 --&gt; &lt;div class=\"carousel-inner\" role=\"listbox\"&gt; &lt;!-- 每一个.item就是单个轮播项目，注意默认要给第一个轮播项目加上active，表示为焦点 --&gt; &lt;div class=\"item active\"&gt; &lt;!-- 轮播项目中展示的图片 --&gt; &lt;img src=\"example.jpg\" alt=\"示例图片\"&gt; &lt;div class=\"carousel-caption\"&gt; &lt;!-- 标题或说明性文字，如果不需要，直接删除当前div.carousel-caption --&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;!-- ... --&gt; &lt;/div&gt; &lt;!-- ... --&gt; &lt;/div&gt; &lt;!-- 图片轮播上左右两个控制按钮，分别点击可以滚动到上一张和下一张 --&gt; &lt;!-- 此处需要注意的是 该a链接的href属性必须指向需要控制的轮播图ID --&gt; &lt;!-- 另外a链接中的data-slide=\"prev\"代表点击该链接会滚到上一张，如果设置为next的话则相反 --&gt; &lt;a class=\"left carousel-control\" href=\"#轮播图的ID\" role=\"button\" data-slide=\"prev\"&gt; &lt;span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"&gt;&lt;/span&gt; &lt;span class=\"sr-only\"&gt;上一张&lt;/span&gt; &lt;/a&gt; &lt;a class=\"right carousel-control\" href=\"#轮播图的ID\" role=\"button\" data-slide=\"next\"&gt; &lt;span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"&gt;&lt;/span&gt; &lt;span class=\"sr-only\"&gt;下一张&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 5.1.3.由于轮播图片超宽造成的影响 美工为了在不同屏幕下更好地展示将图片两边做的非常宽，但是我们大多数情况的页面宽度都无法满足这样的图片宽度 而且Bootstrap的样式中默认将图片的max-width设置为100%； 造成界面图片缩放 想在一个较小屏幕下展示一个超宽的图片，并让图片居中显示 两种办法： 换用背景图的方式，background-position: center center; 使img元素绝对定位，left:50%，margin-left: -width/2 5.2.background使用 将容器的高度固定（410px） 将轮播图改为背景显示 由于可能图片的高度不一定是410px 所以需要设置css3中的background-size 5.2.1.background-size length 如 background-size: 100px 100px，将背景图固定到多大尺寸 percentage 如 background-size: 90% 90%，以百分比的形式设置背景大小 cover 1.背景图片等比例缩放 2.让背景图相对较小边放大到目标容器大小结束 如：一张100*200的背景图放到一个300*400的盒子中，最终背景图片的大小是300*600 因为背景图的较小边为100，将100放大到目标容器300的宽度，放大了3倍，最终结果300*600 contain 1.背景图片等比例缩放 2.让背景图相对较大边放大到目标容器大小结束 如：一张100*200的背景图放到一个300*400的盒子中，最终背景图片的大小是200*400 因为背景图的较大边为200，将200放大到目标容器400的高度，放大了2倍，最终结果200*400 democover contain 5.3.图片响应式 目的 各种终端都需要正常显示图片 移动端应该使用更小（体积）的图片 实现方式 将元素中直接设置的图片背景删除，换成两个data-属性（如：data-img-sm=”小图路径”，data-img-lg=”大图路径”） 通过JS的方式获取屏幕的宽度； 判断屏幕宽度是否小于一定的值（如：768） 根据判断情况决定使用具体的大图还是小图 12345678910111213141516// 获取屏幕宽度var windowWidth = $(window).width();// 判断屏幕属于大还是小var isSmallScreen = windowWidth &lt; 768;// 根据大小为界面上的每一张轮播图设置背景// $('#main_ad &gt; .carousel-inner &gt; .item') // 获取到的是一个DOM数组（多个元素）$('#main_ad &gt; .carousel-inner &gt; .item').each(function(i, item) &#123; // 因为拿到是DOM对象 需要转换 var $item = $(item); // var imgSrc = $item.data(isSmallScreen ? 'image-xs' : 'image-lg'); var imgSrc = isSmallScreen ? $item.data('image-xs') : $item.data('image-lg'); // 设置背景图片 $item.css('backgroundImage', 'url(\"' + imgSrc + '\")');&#125;); 5.4.window resize事件 由于上一步我们实现的过程是指在页面加载完成判断一次， 当用户手动调整页面宽度过后没有及时发生变化， 所以我们可以通过window的resize事件中重新完成以上操作来解决这个问题 1234function 窗口变化后执行的函数名()&#123; // 具体的操作&#125;$(window).on('resize', 窗口变化后执行的函数名); 这个事件只会在窗口尺寸发生变化后执行，但是我们需要一开始时执行一次 12...$(window).on('resize', 窗口变化后执行的函数名).trigger('resize'); 5.5.小图片不需要使用背景的方式 小图如果还是使用背景的方式，当屏幕特别小时，效果很差 所以当使用小图时，改用img的方式 123456// 因为我们需要小图时 尺寸等比例变化，所以小图时我们使用img方式if (isSmallScreen) &#123; $item.html('&lt;img src=\"' + imgSrc + '\" alt=\"\" /&gt;');&#125; else &#123; $item.empty();&#125; 按照目前的情况，如果是小图展示则不需要给容器加上410px的固定高度 所以我们可以通过CSS媒体查询的方式解决 12345678910111213#main_ad &gt; .carousel-inner &gt; .item &#123; background-repeat: no-repeat; background-position: center center; background-size: cover;&#125;@media (min-width: 768px) &#123; #main_ad &gt; .carousel-inner &gt; .item &#123; height: 410px; &#125;&#125;#main_ad &gt; .carousel-inner &gt; .item &gt; img &#123; width: 100%;&#125; 6.网站特性6.1.网格系统 该板块当屏幕为中等尺寸时分为3列，较小屏幕是分为2列 所以使用网格系统划分 1234&lt;div class=\"col-sm-6 col-md-4\"&gt; &lt;!-- ... --&gt;&lt;/div&gt;&lt;!-- ... --&gt; 6.2.媒体对象样式 每一个小块的样式可以通过Bootstrap中的媒体对象样式实现 1234567891011&lt;a href=\"#\"&gt; &lt;div class=\"media\"&gt; &lt;div class=\"media-left\"&gt; &lt;i class=\"icon-uniE907\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"media-body\"&gt; &lt;h4 class=\"media-heading\"&gt;支付交易保障&lt;/h4&gt; &lt;p&gt;银联支付全称保证支付安全&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/a&gt; 6.3.响应式辅助类型 整个板块在超小屏幕下是隐藏起来的 只需要给当前板块加上hidden-xs的class 7.预约投标7.1.pull-left 左边文字段落 7.2.pull-right 右边文字段落 8.投资产品8.1.Tab选项卡 选项卡功能可以通过Bootstrap中提供的相应组件实现http://v3.bootcss.com/javascript/#tabs 1234567891011121314151617181920&lt;div class=\"container\"&gt; &lt;!-- 所有的选项卡标签，每个标签点击分别对应面板展示出来 --&gt; &lt;ul class=\"nav nav-tabs\" role=\"tablist\"&gt; &lt;!-- 下面的li定义了一个选项卡的标签，其中a标签的href属性指向的就是对应要展开的面板ID aria-controls属性是说当前a链接控制的是哪个元素（注意此属性和功能无关，只是语义） 注意一定要给a标签加上data-toggle=\"tab\"，如果不加则boostrap无法知道这是一个选项卡标签，也就不会有相应的效果 --&gt; &lt;li role=\"presentation\" class=\"active\"&gt;&lt;a href=\"#第一个标签的ID\" aria-controls=\"第一个标签的ID\" role=\"tab\" data-toggle=\"tab\"&gt;标签页1&lt;/a&gt;&lt;/li&gt; &lt;li role=\"presentation\"&gt;&lt;a href=\"#第二个标签的ID\" aria-controls=\"第二个标签的ID\" role=\"tab\" data-toggle=\"tab\"&gt;标签页2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- Tab panes --&gt; &lt;div class=\"tab-content\"&gt; &lt;!-- .tab-pane定义当前是一个tab面板，通过id和选项卡标签关联起来 --&gt; &lt;div role=\"tabpanel\" class=\"tab-pane active\" id=\"第一个标签的ID\"&gt; &lt;!-- 标签展开后的内容 --&gt; &lt;/div&gt; &lt;div role=\"tabpanel\" class=\"tab-pane\" id=\"第二个标签的ID\"&gt;...&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 8.2.网格系统 和网站特色板块的网格系统定义一样 8.3.::before ::after1234567891011121314151617181920.panel-czbk &gt; .panel-heading::before,.panel-czbk &gt; .panel-heading::after &#123; content: ' '; width: 16px; height: 16px; border-radius: 8px; background-color: #f0f0f0; position: absolute;&#125;.panel-czbk &gt; .panel-heading::before &#123; top: -8px; left: -8px;&#125;.panel-czbk &gt; .panel-heading::after &#123; bottom: -8px; left: -8px; box-shadow: 0 2px 1px #ccc inset;&#125; 8.5.tooltip插件 注意，bootstrap中的tooltip插件必须通过js方式初始化 8.6.选项卡标签横向滚动 要给ul加一个容器，这个容器有横向滚动条 动态设置ul的宽度，宽度是根据内容大小决定的width= sum (li.width) 9.新闻资讯9.1.Tab选项卡9.2.响应式偏移10.合作伙伴10.1.相邻兄弟选择器11.登录对话框11.1模态框11.2表单样式12.导航吸顶12.1.affix组件13.深度自定义13.1.http://v3.bootcss.com/customize13.2.通过 Less 文件修改14.version 4http://www.cnblogs.com/micua/p/bootstrap-version4-alpha.html","categories":[{"name":"项目实战","slug":"项目实战","permalink":"https://thawsoar.github.io/categories/项目实战/"}],"tags":[{"name":"项目","slug":"项目","permalink":"https://thawsoar.github.io/tags/项目/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"https://thawsoar.github.io/tags/Bootstrap/"}]},{"title":"canvas时钟","slug":"canvas_clock","date":"2017-06-15T11:21:55.000Z","updated":"2017-06-19T02:58:17.383Z","comments":true,"path":"2017/06/15/canvas_clock/","link":"","permalink":"https://thawsoar.github.io/2017/06/15/canvas_clock/","excerpt":"canvas时钟小效果 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;canvas clock&lt;/title&gt; &lt;style&gt; div &#123; text-align: center; margin-top: 250px; &#125; #clock &#123; border: 1px solid #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;canvas id=\"clock\" height=\"200px\" width=\"200px\"&gt;&lt;/canvas&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","text":"canvas时钟小效果 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;canvas clock&lt;/title&gt; &lt;style&gt; div &#123; text-align: center; margin-top: 250px; &#125; #clock &#123; border: 1px solid #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;canvas id=\"clock\" height=\"200px\" width=\"200px\"&gt;&lt;/canvas&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&lt;script&gt;var dom = document.getElementById('clock');var ctx = dom.getContext('2d');var width = ctx.canvas.width;var height = ctx.canvas.height;var r = width / 2;var rem = width/200;//比例function drawBackground() &#123; ctx.save(); ctx.translate(r,r); ctx.beginPath(); ctx.lineWidth = 10 * rem; ctx.arc(0, 0, r-ctx.lineWidth / 2, 0, 2*Math.PI, false); ctx.stroke(); var hourNumber=[3,4,5,6,7,8,9,10,11,12,1,2]; ctx.font = 18 * rem +'px Arial'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; hourNumber.forEach(function(number,i) &#123; var rad = 2*Math.PI /12 * i; var x = Math.cos(rad) * (r-30 * rem); var y = Math.sin(rad) * (r-30 * rem); ctx.fillText(number,x,y); &#125;); for (var i = 0; i &lt; 60; i++) &#123; var rad = 2*Math.PI /60 * i; var x = Math.cos(rad) * (r-18 * rem); var y = Math.sin(rad) * (r-18) * rem; ctx.beginPath(); if(i%5===0) &#123; ctx.fillStyle = '#000'; ctx.arc(x, y, 2 * rem, 0, 2*Math.PI, false); &#125;else &#123; ctx.fillStyle = '#ccc'; ctx.arc(x, y, 2 * rem, 0, 2*Math.PI, false); &#125; ctx.fill(); &#125;&#125;function drawHour(hour,minute) &#123; ctx.save(); ctx.beginPath(); var rad = 2*Math.PI/12 *hour; var mrad = 2*Math.PI/12/60*minute; ctx.rotate(rad+mrad); ctx.lineWidth = 6 * rem; ctx.lineCap = \"round\"; ctx.moveTo(0, 10 * rem); ctx.lineTo(0,-r/2); ctx.stroke(); ctx.restore();&#125;function drawMinute(minute) &#123; ctx.save(); ctx.beginPath(); var rad = 2*Math.PI/60 *minute; ctx.rotate(rad); ctx.lineWidth = 3 * rem; ctx.lineCap = \"round\"; ctx.moveTo(0, 10 * rem); ctx.lineTo(0,-r + 30 * rem); ctx.stroke(); ctx.restore();&#125;function drawSecond(second) &#123; ctx.save(); ctx.beginPath(); ctx.fillStyle='red'; var rad = 2*Math.PI/60 *second; ctx.rotate(rad); ctx.moveTo(-2 * rem, 20 * rem); ctx.lineTo(2 * rem,20 * rem); ctx.lineTo(1 * rem,-r+18 * rem); ctx.lineTo(-1 * rem,-r+18 * rem); ctx.fill(); ctx.restore();&#125;function drawDot() &#123; ctx.beginPath(); ctx.fillStyle='white'; ctx.arc(0, 0, 3 * rem, 0, 2*Math.PI, false); ctx.fill();&#125;function draw() &#123; ctx.clearRect(0,0,width,height); var now = new Date(); var hour = now.getHours(); var minute = now.getMinutes(); var second = now.getSeconds(); drawBackground(); drawHour(hour,minute); drawMinute(minute); drawSecond(second); drawDot(); ctx.restore();&#125;draw();setInterval(draw,1000);&lt;/script&gt;","categories":[{"name":"Canvas","slug":"Canvas","permalink":"https://thawsoar.github.io/categories/Canvas/"}],"tags":[{"name":"Canvas","slug":"Canvas","permalink":"https://thawsoar.github.io/tags/Canvas/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://thawsoar.github.io/tags/JavaScript/"}]},{"title":"SQL Sever 复习笔记","slug":"sqlsever_review","date":"2017-06-14T12:28:58.000Z","updated":"2017-06-26T23:34:57.239Z","comments":true,"path":"2017/06/14/sqlsever_review/","link":"","permalink":"https://thawsoar.github.io/2017/06/14/sqlsever_review/","excerpt":"创建数据库123456789101112131415161718--if exists( select * from sysdatabases where name='db_name') --drop database School --删除当前指定名称的数据库 create database db_name on primary ( name='luoji_data', size=1mb, filegrowth='5%', maxsize=unlimited, filename='c:\\data\\userdb_data.mdf' ) log on ( name='luoji_log', size=1, filegrowth='5%', maxsize=unlimited, filename='c:\\data\\userdb_log.ldf' )","text":"创建数据库123456789101112131415161718--if exists( select * from sysdatabases where name='db_name') --drop database School --删除当前指定名称的数据库 create database db_name on primary ( name='luoji_data', size=1mb, filegrowth='5%', maxsize=unlimited, filename='c:\\data\\userdb_data.mdf' ) log on ( name='luoji_log', size=1, filegrowth='5%', maxsize=unlimited, filename='c:\\data\\userdb_log.ldf' ) 创建数据表12345678--if exists(select * from sysobjects where name='tb_name') --drop table Classes create table tb_name ( teacher nvarchar(10) not null, classid int identity(1,1), classname nvarchar(50) not null, ) 主键约束 为id添加主键 12345678910111213141516171819202122 alter table tb_name add constraint pk_id primary key(id)``` - 为name添加唯一键```SQL alter table tb_name add constraint uq_name unique(name)``` - 同时创建salary的默认约束和age的check约束```SQL alter table teacher add constraint df_salary default(5000) for salary, constraint ck_age check(age&gt;0 and age&lt;=100)``` - 为teacher表的classid字段创建主外键```SQL alter table teacher with nocheck add constraint fk_classid foregin key(classid) references classes(classid) SQL基本语句数据插入123use Schoolinsert into teacher values('张三',5,1,30,4000,'1984-9-11')insert into teacher(Name,ClassId,Gender,Age,Salary,Birthday) values('张三',5,1,30,4000,'1984-9-11') 数据更新12update teacher set Gender='true' where id=20update teacher set classid=4,age+=5,salary=5000 where id=22 and age&gt;20 数据检索123select studentid,studentname,sex,[Address] from db_student--别名select studentid as 学号,StudentName 姓名,性别=Sex,[Address] from Student--添加常量列 select StudentNo as 学号,StudentName 姓名,性别=Sex,[Address],国籍='中华人民共和国' from Student select的作用123select top 100 * from studentselect top 10 percent * from studentselect distinct distinct loginpwd,sex,email from student --distinct可以去除结果集中的重复记录 聚合函数 1.对null过滤 2.都需要有一个参数 3.都是返回一个数值 sum()：求和:只能对数值而言,对字符串和日期无效 avg()：求平均值 count()：计数：得到满足条件的记录数 min()：求最小值 获取学员总人数 1select count(*) from Student 查询最大年龄值 1select MIN(BornDate) from student 指定区间范围 1select studentid,,,, from Student where BornDate between '1990-1-1' and '1996-1-1' 查询班级id 1 3 5 7的学员信息 1select * from Student where ClassId=1 or ClassId=3 or ClassId=5 or ClassId=7 指定具体的取值范围–可以是任意类型的范围.值的类型需要一致–可以相互转换 12select * from Student where ClassId in(1,3,'5',7)select * from Student where ClassId not in(1,3,'5',7) 模糊查询 查询姓林的女同学 等于号(=)是需要完全匹配 123select * from Student where Sex='女' and StudentName='林'select * from Student where Sex='女' and StudentName like '林%'--任意个字段select * from Student where Sex='女' and StudentName like '林_'--任意单个字符 [ ]的使用 学号在11~15之间的学员信息 12345678select * from Student where StudentNo like '[13579]'---处理null值--null:不是地址没有分配,而是不知道你需要存储什么值 所以null是指 不知道。但是=只能匹配具体的值，而null根本就不是一个值select COUNT(email) from Student where Email !=nullselect COUNT(email) from Student where Email is nullselect count(email) from Student where Email is not null --将null值替换为指定的字符串值select StudentName,ISNULL(Email,'没有填写电子邮箱') from Student where ClassId=2 分组统计 案例123456789 select classid,Sex,COUNT(*) from Student where Sex='男' group by ClassId,sex``` - 查询每一个班级的总人数,显示人数&gt;=2的信息```SQL select ClassId ,COUNT(*) as num from Student where Email is not null GROUP by ClassId having COUNT(*)&gt;=2 order by num desc select 字段列表 from 表列表 where 数据源做筛选 group by 分组字段列表 having 分组结果集做筛选 Order by 对结果集做记录重排 子查询 查询比“lisa”年龄大的学员信息 12select * from Student where BornDate&lt;(select BornDate from Student where StudentName='lisa') 查询154班的学员信息 12select * from Student where ClassId=(select ClassId from grade where classname='154班') 当子查询返回多个值(多行一列),可以使用in来指定这个范围 12select * from Student where ClassId in(select ClassId from grade where classname&lt;&gt;'154班') 当没有用 EXISTS 引入子查询时，在选择列表中只能指定一个表达式。如果是多行多列或者一行多列就需要使用exists 使用 EXISTS 关键字引入子查询后，子查询的作用就相当于进行存在测试。外部查询的 WHERE 子句测试子查询返回的行是否存在 12select * from Student where EXISTS(select * from grade)select * from Student where ClassId in(select * from grade) 查询年龄比“陶翔”大的学员，显示这些学员的信息 12select * from Student where BornDate&lt;(select BornDate from Student where StudentName='陶翔') 查询154班开设的课程 12select * from Subject where ClassId=(select ClassId from grade where classname='154班') 查询参加最近一次“office”考试成绩最高分和最低分 查询出科目 ID 1234567 select subjectid from Subject where SubjectName='office'``` 2. 查询出这一科目的考试日期```SQL select MAX(ExamDate) from Result where SubjectId=(select subjectid from Subject where SubjectName='office') 写出查询的框架 12select MAX(StudentResult),MIN(StudentResult) from Result where SubjectId=() and ExamDate=() 使用子查询做为条件 1234567select MAX(StudentResult),MIN(StudentResult) from Result where SubjectId=( select subjectid from Subject where SubjectName='office' ) and ExamDate=( select MAX(ExamDate) from Result where SubjectId=( select subjectid from Subject where SubjectName='office' ) ) 表连接Join inner join :能够找到两个表中建立连接字段值相等的记录 查询学员信息显示班级名称 123select student.studentid,student.studentname,grade.classNamefrom studentinner join grade on student.classid=grade.classid 左连接: 关键字前面的表是左表，后面的表是右表 左连接可以得到左表所有数据，如果建立关联的字段值在右表中不存在，那么右表的数据就以null值替换123select PhoneNum.*,PhoneType.*from PhoneNum left join PhoneType on PhoneNum.pTypeId=PhoneType.ptId -full join :可以得到左右连接的综合结果–去重复123select PhoneNum.*,PhoneType.*from PhoneNum full join PhoneType on PhoneNum.pTypeId=PhoneType.ptId 视图 视图就是一张虚拟表，可以像使用子查询做为结果集一样使用视图 select * from vw_getinfo 使用代码创建视图 语法： create view vw_自定义名称 as –查询命令 go –查询所有学员信息 create view vw_getinfo as 可以通过聚合函数获取所以记录数123456select top (select COUNT(*) from Student) Student.StudentNo,Student.StudentName,grade.ClassId,grade.classname from Student inner join grade on Student.ClassId=grade.ClassId order by StudentName 视图中不能使用order by --select * from grade --只能创建一个查询语句 --delete from grade where ClassId&gt;100 --在视图中不能包含增加删除修改go","categories":[{"name":"SQL Sever","slug":"SQL-Sever","permalink":"https://thawsoar.github.io/categories/SQL-Sever/"}],"tags":[{"name":"SQL Sever","slug":"SQL-Sever","permalink":"https://thawsoar.github.io/tags/SQL-Sever/"}]},{"title":"欢迎来到我的博客","slug":"welcome","date":"2017-06-09T08:42:58.000Z","updated":"2018-07-30T06:49:12.751Z","comments":true,"path":"2017/06/09/welcome/","link":"","permalink":"https://thawsoar.github.io/2017/06/09/welcome/","excerpt":"欢迎来到我的博客 大家好，我是小翔同学，欢迎各位神踩踏本站点！嗯哼。。。 经过小两天的折腾，基于hexo 和 github搭建的静态个人blog算是初步完成了。 对于本菜鸟，搭建期间当然免不了入坑，好在前辈们已经差不多把坑都填满了。 本站采用的是hexo的next的主题，此主题因简洁大方，可定制性强，能够让博主专注于写博文等原因颇受静态博主的青睐。 服务器是基于github page提供的免费空间，因为是二级域名 github.io的原因，所以网易云跟帖服务什么的是不能用了，但是即使能用，我想也只是自己评论自己了O(∩_∩)O~哈哈，so就不为难自己了！ 为什么要建博客站点呢?","text":"欢迎来到我的博客 大家好，我是小翔同学，欢迎各位神踩踏本站点！嗯哼。。。 经过小两天的折腾，基于hexo 和 github搭建的静态个人blog算是初步完成了。 对于本菜鸟，搭建期间当然免不了入坑，好在前辈们已经差不多把坑都填满了。 本站采用的是hexo的next的主题，此主题因简洁大方，可定制性强，能够让博主专注于写博文等原因颇受静态博主的青睐。 服务器是基于github page提供的免费空间，因为是二级域名 github.io的原因，所以网易云跟帖服务什么的是不能用了，但是即使能用，我想也只是自己评论自己了O(∩_∩)O~哈哈，so就不为难自己了！ 为什么要建博客站点呢? 分享记录技术文章（自己看） 见证本菜鸟的成长之路（理想很美好，现实很骨感哟！） 兴趣（可能吧！） 后事如何呢? 此站点应刚建不久，样式上还是next主题的默认样式，有时间再改吧！（我没时间） 移动端内容有点问题，不知道怎么搞（管他呢，又没人看） 要在github上备份一下（好） 我想买个域名（对，“想”） 小记 还不熟悉sublime上的Markdown编辑，所以呈现的排版不好看，各位神见谅哈！欢迎踩踏！（反正你也没地吐槽）","categories":[{"name":"life","slug":"life","permalink":"https://thawsoar.github.io/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://thawsoar.github.io/tags/life/"}]},{"title":"Angular入门","slug":"angular_1","date":"2017-06-06T16:00:00.000Z","updated":"2017-06-21T04:44:15.543Z","comments":true,"path":"2017/06/07/angular_1/","link":"","permalink":"https://thawsoar.github.io/2017/06/07/angular_1/","excerpt":"推荐工具 在线编辑器 http://codepen.io/ https://jsfiddle.net/ Angular 简介什么是 AngularJS 一款非常优秀的前端高级 JS 框架 最早由 Misko Hevery 等人创建 2009 年被 Google 公式收购，用于其多款产品 目前有一个全职的开发团队继续开发和维护这个库 有了这一类框架就可以轻松构建 SPA 应用程序 轻松构建 SPA（单一页面应用程序） 单一页面应用程序： 只有一个页面（整个应用的一个载体） 内容全部是由AJAX方式呈现出啦的 其核心就是通过指令扩展了 HTML，通过表达式绑定数据到 HTML。","text":"推荐工具 在线编辑器 http://codepen.io/ https://jsfiddle.net/ Angular 简介什么是 AngularJS 一款非常优秀的前端高级 JS 框架 最早由 Misko Hevery 等人创建 2009 年被 Google 公式收购，用于其多款产品 目前有一个全职的开发团队继续开发和维护这个库 有了这一类框架就可以轻松构建 SPA 应用程序 轻松构建 SPA（单一页面应用程序） 单一页面应用程序： 只有一个页面（整个应用的一个载体） 内容全部是由AJAX方式呈现出啦的 其核心就是通过指令扩展了 HTML，通过表达式绑定数据到 HTML。 为什么使用 AngularJS 更少的代码，实现更强劲的功能 将一些以前在后台开发中使用的思想带入前端开发 带领当前市面上的框架走向模式化或者架构化 AngularJS 的核心特性 MVC 模块化 自动化双向数据绑定 指令系统 相关链接 http://www.apjs.net/ http://www.angularjs.cn/ http://docs.angularjs.cn/api https://material.angularjs.org http://angular-ui.github.io/ Angular 上手安装 Angular 下载 Angular.js 的包 https://github.com/angular/angular.js/releases 使用 CDN 上的 Angular.js http://apps.bdimg.com/libs/angular.js/1.4.9/angular.min.js 使用 Bower 安装 1bower install angular 使用 NPM 安装 1npm install angular 每种方式安装包，本质都是将angular的库下载到当前文件夹中 简单示例12 angular中最重要的概念是指令（directive） ng-model 是双向数据绑定的指令，效果就是将当前元素的value属性和模型中的user.name建立绑定关系 JS: BOM DOM ES 分析 Angular 示例使用总结运行官方文档CDN的优势Content Dev 快 节省自己服务器的带宽压力和流量 Angular 基础概念MVC 思想什么是 MVC 思想 将应用程序的组成划分为三个部分：Model View Controller 控制器的作用就是初始化模型用的； 模型就是用于存储数据的 视图用于展现数据 登陆案例 模型 我们数据库中所有用户的信息 接受控制器传来的用户名和密码进行校验的业务逻辑并返回true/false 控制器 接受用户在界面上填写的用户名和密码 将用户名和密码交给模型 视图 给用户呈现一个表单 接受用户输入内容，并将其提交给控制器 根据控制器返回的数据，响应用户页面 模块（Module） 划分应用程序结构 我们可以通过angular.module创建一个模块 angular.module方法传递两个参数才是创建模块，一个参数是获取模块 控制器（Controller） 通过$scope和视图关联 视图模型（$scope）表达式（Expression）单向数据绑定双向数据绑定Angular 指令系统","categories":[{"name":"Angular","slug":"Angular","permalink":"https://thawsoar.github.io/categories/Angular/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://thawsoar.github.io/tags/npm/"},{"name":"Angular","slug":"Angular","permalink":"https://thawsoar.github.io/tags/Angular/"},{"name":"github","slug":"github","permalink":"https://thawsoar.github.io/tags/github/"}]},{"title":"构建前端自动化工作流环境","slug":"nodejs_1","date":"2017-06-06T16:00:00.000Z","updated":"2017-06-21T04:46:01.107Z","comments":true,"path":"2017/06/07/nodejs_1/","link":"","permalink":"https://thawsoar.github.io/2017/06/07/nodejs_1/","excerpt":"学习目标 了解什么是Node，什么是NPM；（Node.js） 掌握Bower的使用； 熟练使用Less/Sass； 搭建一个自己的自动化工作流环境； 自动编译 自动合并 自动刷新 自动部署 GIT 与 GITHUB master 托管源文件 gh-pages 托管部署文件 在github搭建自己的blog","text":"学习目标 了解什么是Node，什么是NPM；（Node.js） 掌握Bower的使用； 熟练使用Less/Sass； 搭建一个自己的自动化工作流环境； 自动编译 自动合并 自动刷新 自动部署 GIT 与 GITHUB master 托管源文件 gh-pages 托管部署文件 在github搭建自己的blog 为什么要有自动化的流程 在我们的开发过程中有大量的重复操作 DRY Don’t repeat yourself 开发人员的精力应放在哪？创造，新的一切 前端开发的编译操作 1.Node环境1.1.什么是Node Node.js 可能类似jquery.js 不是JS文件，也不是一个JS框架（） 而是Server side Javascript runtime, 服务端的一个JS运行时 我们可以在NODE运行JS代码 alert();ECMAScript JS- ES BOM DOM node中只能运行ECMAScript，无法使用 BOM 和 DOM 目前我们的JS是运行在浏览器内核中 PHP是什么？是一门脚本语言也是一个运行环境 为什么Node选中了JS， 说到底就是一个JS运行环境 目前有两个分支 Node.js 0.12.7 官方版本 要求尽善尽美 IO.js 是社区的产物，不是官方的东西，io.js有很多新特性，迭代非常快，社区推进非常快 15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了 node 5.x == io.js node 4.0 == node 1.2.Node环境搭建1.2.1.Mac 安装包的方式 pkg NVM（Node Version Manager） 1234$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash$ echo '. ~/.nvm/nvm.sh' &gt;&gt; .bash_profile$ nvm install stable$ nvm alias default stable 1.2.2.Windows 安装包的方式 msi_x64 msi_x86 NVM（Node Version Manager） nvm(node version manager) 因为NODE版本比较多，开发人员可能依赖很多版本 通过NVM，可以轻松切换于不同的版本之间 1 NVM_HOME=C:\\Develop\\nvm NVM_SYMLINK=C:\\Develop\\nodejs NPM_HOME=C:\\Develop\\nvm\\npm PATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME% 1.2.3.环境变量 环境变量就是操作系统提供的系统级别用于存储变量的地方 系统变量和用户变量 系统变量指的是所用当前系统用户共享的变量 自己的电脑一般只有一个用户 建议将自己配置的环境变量放在用户变量中，用户变量比较干净 环境变量的变量名是不区分大小写的 变量间运行相互引用 特殊值： PATH变量（不区分大小写） PATH 相当于一个路径的引用 只要添加到PATH变量中的路径，都可以在任何目录下搜索 命令行 可以用来执行当前目录下的文件 命令 cd :change directory Node.js是一个轻内核（本身没有什么功能）的东东，所有的功能都要功能包提供 node官方提供了一些最基础的包 1.3.Node用途REPL环境（控制台环境）1.3.1.开发Web应用程序 做动态网站 开发提供数据的服务端API 1.3.2.前端开发工具基础 Node.js给前端乃至整个开发行业带来一场工业革命 刀跟火种 1.4.Node开发Web应用Demo1.4.1.复习请求与响应客户端发送到服务端的东西称之为请求报文服务端返回给客户端的东西称之为响应报文 1.5.NPM1.5.1.什么是NPMhttps://www.npmjs.com/ Node Package Manager Node应用程序依赖包的管理工具 安装卸载更新之类的操作 1.5.2.为什么使用NPM 包很多 场景：我需要用一个A，A依赖B，B依赖C 常见的包管理工具都有循环依赖的功能 你只需记住你要什么东西 1.5.3.常见的NPM操作// 安装一个包，默认安装最新稳定版本npm install package_name// –save// 初始化操作，给项目添加一个配置文件npm init// –yes参数走默认配置 如果官方数据源太慢使用 https://npm.taobao.org/ 2.Bower2.1.什么是Bower 官网 web应用程序依赖项管理工具 2.2.为什么使用Bower 方便便捷的方式管理包，zhuangbi 2.3.Bower实践 npm install -g bower // -g:global 修改npm全局路径，就是在用户目录下添加.npmrc文件 3.Sass/LESS 4.Gulp4.1.Gulp简介 链接： 官网 中文网 就是用来机械化的完成重复性质的工作 gulp的机制就是将重复工作抽象成一个个的任务， 4.2.Gulp准备工作 安装Node.js 安装 gulp 命令行工具 npm install -g gulp 初始化 gulp 项目 创建任务 - gulpfile.js 4.3.基本使用4.4.常用插件 编译 Less：gulp-less 创建本地服务器：gulp-connect 合并文件：gulp-concat 最小化 js 文件：gulp-uglify 重命名文件：gulp-rename 最小化 css 文件：gulp-minify-css 压缩html文件 gulp-minify-html 最小化图像：gulp-imagemin","categories":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://thawsoar.github.io/categories/Nodejs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://thawsoar.github.io/tags/npm/"},{"name":"github","slug":"github","permalink":"https://thawsoar.github.io/tags/github/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://thawsoar.github.io/tags/Nodejs/"}]},{"title":"Git","slug":"git_1","date":"2017-06-06T16:00:00.000Z","updated":"2017-06-21T04:44:26.566Z","comments":true,"path":"2017/06/07/git_1/","link":"","permalink":"https://thawsoar.github.io/2017/06/07/git_1/","excerpt":"GIT什么是GIT 是一个源代码管理工具 在一个项目中，凡是由开发人员编写的都算是源代码 源代码有必要管理起来？ 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化 人为的维护比较麻烦， GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具 Git 之前 很多使用 svn vss tfs hs …… https://guides.github.com/","text":"GIT什么是GIT 是一个源代码管理工具 在一个项目中，凡是由开发人员编写的都算是源代码 源代码有必要管理起来？ 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化 人为的维护比较麻烦， GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具 Git 之前 很多使用 svn vss tfs hs …… https://guides.github.com/ 安装GIT git命令行工具 基于git命令行的一个客户端软件（提供一个界面去管理源代码） GIT命令操作查看、添加、提交、删除、找回，重置修改文件 git help # 显示command的help git show # 显示某次提交的内容 git show $id git co – # 抛弃工作区修改 git co . # 抛弃工作区修改 git add # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm # 从版本库中删除文件 git rm –cached # 从版本库中删除文件，但不删除文件 git reset # 从暂存区恢复到工作文件 git reset – . # 从暂存区恢复到工作文件 git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git - ci -am “some comments” git ci –amend # 修改最后一次提交记录 git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD # 恢复最后一次提交的状态 查看文件diff git diff # 比较当前文件和暂存区文件差异 git diff git diff # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff –staged # 比较暂存区和版本库差异 git diff –cached # 比较暂存区和版本库差异 git diff –stat # 仅仅比较统计信息 查看提交记录 git log git log # 查看该文件每次提交记录 git log -p # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log –stat #查看提交统计信息 tig Mac上可以使用tig代替diff和log，brew install tig Git 本地分支管理查看、切换、创建和删除分支 git br -r # 查看远程分支 git br # 创建新的分支 git br -v # 查看各个分支最后提交信息 git br –merged # 查看已经被合并到当前分支的分支 git br –no-merged # 查看尚未被合并到当前分支的分支 git co # 切换到某个分支 git co -b # 创建新的分支，并且切换过去 git co -b # 基于branch创建新的new_branch git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 git co $id -b # 把某次历史提交记录checkout出来，创建成一个分支 git br -d # 删除某个分支 git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase git merge # 将branch分支合并到当前分支 git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master # 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用) git diff &gt; ../sync.patch # 生成补丁 git apply ../sync.patch # 打补丁 git apply –check ../sync.patch #测试补丁能否成功 Git暂存管理 git stash # 暂存 git stash list # 列所有stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 Git远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b origin/ #基于远程分支创建本地分支，功能同上 git push # push所有分支 git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin # 创建远程分支， origin是远程仓库名 git push origin : # 创建远程分支 git push origin : #先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理[GitHub][github.com/thawsoar] git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库 git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库 git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master # 设置远程仓库的HEAD指向master分支 也可以命令设置跟踪远程库和本地库 git branch –set-upstream master origin/master git branch –set-upstream develop origin/develop GITHUB基本使用 https://github.com/ GITHUB是一个GIT服务的提供商， 提出社交化编程 http://zoomzhao.github.io/code-guide/https://github.com/jobbole/awesome-javascript-cnhttps://github.com/jobbole/awesome-css-cn GIT分支","categories":[{"name":"Git","slug":"Git","permalink":"https://thawsoar.github.io/categories/Git/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://thawsoar.github.io/tags/npm/"},{"name":"github","slug":"github","permalink":"https://thawsoar.github.io/tags/github/"},{"name":"git","slug":"git","permalink":"https://thawsoar.github.io/tags/git/"}]},{"title":"Git","slug":"git-1","date":"2017-06-06T16:00:00.000Z","updated":"2017-06-21T04:50:57.637Z","comments":true,"path":"2017/06/07/git-1/","link":"","permalink":"https://thawsoar.github.io/2017/06/07/git-1/","excerpt":"GIT什么是GIT 是一个源代码管理工具 在一个项目中，凡是由开发人员编写的都算是源代码 源代码有必要管理起来？ 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化 人为的维护比较麻烦， GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具 Git 之前 很多使用 svn vss tfs hs …… https://guides.github.com/","text":"GIT什么是GIT 是一个源代码管理工具 在一个项目中，凡是由开发人员编写的都算是源代码 源代码有必要管理起来？ 让源代码可以被追溯，主要记录每次变更了什么，谁主导这次变化 人为的维护比较麻烦， GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具 Git 之前 很多使用 svn vss tfs hs …… https://guides.github.com/ 安装GIT git命令行工具 基于git命令行的一个客户端软件（提供一个界面去管理源代码） GIT命令操作查看、添加、提交、删除、找回，重置修改文件 git help # 显示command的help git show # 显示某次提交的内容 git show $id git co – # 抛弃工作区修改 git co . # 抛弃工作区修改 git add # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm # 从版本库中删除文件 git rm –cached # 从版本库中删除文件，但不删除文件 git reset # 从暂存区恢复到工作文件 git reset – . # 从暂存区恢复到工作文件 git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git - ci -am “some comments” git ci –amend # 修改最后一次提交记录 git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象 git revert HEAD # 恢复最后一次提交的状态 查看文件diff git diff # 比较当前文件和暂存区文件差异 git diff git diff # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff –staged # 比较暂存区和版本库差异 git diff –cached # 比较暂存区和版本库差异 git diff –stat # 仅仅比较统计信息 查看提交记录 git log git log # 查看该文件每次提交记录 git log -p # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log –stat #查看提交统计信息 tig Mac上可以使用tig代替diff和log，brew install tig Git 本地分支管理查看、切换、创建和删除分支 git br -r # 查看远程分支 git br # 创建新的分支 git br -v # 查看各个分支最后提交信息 git br –merged # 查看已经被合并到当前分支的分支 git br –no-merged # 查看尚未被合并到当前分支的分支 git co # 切换到某个分支 git co -b # 创建新的分支，并且切换过去 git co -b # 基于branch创建新的new_branch git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 git co $id -b # 把某次历史提交记录checkout出来，创建成一个分支 git br -d # 删除某个分支 git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase git merge # 将branch分支合并到当前分支 git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master # 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用) git diff &gt; ../sync.patch # 生成补丁 git apply ../sync.patch # 打补丁 git apply –check ../sync.patch #测试补丁能否成功 Git暂存管理 git stash # 暂存 git stash list # 列所有stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 Git远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b origin/ #基于远程分支创建本地分支，功能同上 git push # push所有分支 git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin # 创建远程分支， origin是远程仓库名 git push origin : # 创建远程分支 git push origin : #先删除本地分支(git br -d )，然后再push删除远程分支 Git远程仓库管理[GitHub][github.com/thawsoar] git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 创建远程仓库 git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库 git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master # 设置远程仓库的HEAD指向master分支 也可以命令设置跟踪远程库和本地库 git branch –set-upstream master origin/master git branch –set-upstream develop origin/develop GITHUB基本使用 https://github.com/ GITHUB是一个GIT服务的提供商， 提出社交化编程 http://zoomzhao.github.io/code-guide/https://github.com/jobbole/awesome-javascript-cnhttps://github.com/jobbole/awesome-css-cn GIT分支","categories":[{"name":"Git","slug":"Git","permalink":"https://thawsoar.github.io/categories/Git/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://thawsoar.github.io/tags/npm/"},{"name":"github","slug":"github","permalink":"https://thawsoar.github.io/tags/github/"},{"name":"git","slug":"git","permalink":"https://thawsoar.github.io/tags/git/"}]},{"title":"学习一下Markdown编辑","slug":"markdow","date":"2017-06-06T08:42:58.000Z","updated":"2017-06-11T10:17:51.606Z","comments":true,"path":"2017/06/06/markdow/","link":"","permalink":"https://thawsoar.github.io/2017/06/06/markdow/","excerpt":"什么是Markdown Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科 先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。 Markdown语法","text":"什么是Markdown Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科 先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。 Markdown语法 1、分段： 两个回车 2、换行 两个空格 + 回车 3、标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题 4、引用 &gt; 5、列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格 6、代码区块 四个空格 开头 7、链接 [文字](链接地址) 8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址 9、强调 **文字** ， __文字__ ， _文字_ ， *文字* 10、代码 `，","categories":[{"name":"Markdown","slug":"Markdown","permalink":"https://thawsoar.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://thawsoar.github.io/tags/Markdown/"}]}]}